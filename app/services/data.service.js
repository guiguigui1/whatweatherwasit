'use strict';define(['angular'],    function(angular) {        angular            .module('ms.data.service', [])            .factory('dataService', ['$q', '$http', dataService]);    });function dataService($q, $http) {    var self = this;    var local = false;    var wwoKey = '7aae94013a83444fbf8144922171007';    //worldweatheronline    //api-key: 7aae94013a83444fbf8144922171007    //openweathermap    //api-key: a09149dc3b2433cbd3984872f40a71a1    //get local jsons or make backend calls    var basePath = 'services/JSON/';    //locations if local = true    var localLocations = {        historyDay: basePath + 'climate2.json'    };    var locations = localLocations;    return {        getHistoryDay: getHistoryDay,        getClimate: getClimate,        getWeather: getWeather    };    function getHistoryDay(city, date){        var deferred = $q.defer();        var requestUrl = 'http://api.worldweatheronline.com/premium/v1/past-weather.ashx?key=' + wwoKey + '&q=' + city + '&format=json&date=' + date + '&tp=1';        var url = local ? locations.historyDay : requestUrl;        $http.get(url)            .success(function(data) {                deferred.resolve(data);            })            .error(function(data) {                error.log(data);                deferred.reject(data);            });        return deferred.promise;    }    function getClimate(city) {        var deferred = $q.defer();        $http.get(locations.climate)            .success(function(data) {                deferred.resolve(graphService.monthAverages(data));            })            .error(function(data) {                error.log(data);                deferred.reject(data);            });        return deferred.promise;    }    function getWeather(city) {        var deferred = $q.defer();        $http.get(locations.climate)            .success(function(data) {                deferred.resolve(data);            })            .error(function(data) {                deferred.reject(data);            });        return deferred.promise;    }}